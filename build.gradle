buildscript {
    ext {
        springBootVersion = '2.2.6.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local' }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("net.ltgt.gradle:gradle-apt-plugin:0.21")
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'net.ltgt.apt'

group = 'com.twitter.kamilyedrzejuq'
version = '0.0.2-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_14
targetCompatibility = JavaVersion.VERSION_14

mainClassName = "com.twitter.kamilyedrzejuq.Application"

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
compileJava.dependsOn(processResources)

tasks.withType(JavaCompile).each {
    it.options.compilerArgs.add('--enable-preview')
}

tasks.withType(GroovyCompile) {
    it.options.compilerArgs.add('--enable-preview')
}

tasks.withType(Test) {
    jvmArgs += "--enable-preview"
}

[bootJar, bootRun, bootDistTar, bootDistZip, distTar, distZip]*.enabled = false
jar.enabled = true

project.ext.versions = [
        lombokVersion                       : '1.18.12',
        swaggerVersion                      : '2.9.2',
        spockVersion                        : '2.0-M2-groovy-3.0',
        vavrVersion                         : '0.10.2',
        mockWebServerVersion                : '3.14.1',
        gsonVersion                         : '2.8.5',
        springdocOpenapiVersion             : '1.3.2'
]

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local' }
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

test {
    useJUnitPlatform()
    jvmArgs(['--enable-preview'])
    afterSuite { desc, result ->
        if (!desc.parent) {
            if (result.testCount == 0) {
                throw new IllegalStateException("No tests were found. Failing the build")
            }
        }
    }
    testLogging {
        exceptionFormat = 'full'
        events = ["STARTED", "PASSED", "SKIPPED", "FAILED"]

    }
}

sourceSets {
    integrationTest {
        groovy {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir {
                file('src/integrationTest/groovy')
            }
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

configurations {
    integrationTestImplementation.extendsFrom compileOnly
    integrationTestImplementation.extendsFrom implementation
    integrationTestImplementation.extendsFrom annotationProcessor
    integrationTestImplementation.extendsFrom testImplementation
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    include '**/*ITSpec.*'
    include '**/*ITTest.*'

    //systemProperty 'spring.profiles.active', 'integration'
    outputs.upToDateWhen { false }
}


dependencies {
    compileOnly("org.projectlombok:lombok:${versions.lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${versions.lombokVersion}")
    
    implementation("org.springframework.boot:spring-boot-starter-webflux")

    implementation("io.vavr:vavr:${versions.vavrVersion}")

    implementation("com.google.code.gson:gson:${versions.gsonVersion}")
    implementation("org.springdoc:springdoc-openapi-webflux-ui:${versions.springdocOpenapiVersion}")


    testImplementation("org.spockframework:spock-core:${versions.spockVersion}")
    testImplementation("org.spockframework:spock-spring:${versions.spockVersion}")
    
    testImplementation("io.projectreactor:reactor-core")
    testImplementation("io.projectreactor:reactor-test")

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
//        exclude(
//                group : 'org.ow2.asm'
//        )
    }
    testImplementation("com.squareup.okhttp3:mockwebserver:${versions.mockWebServerVersion}")

}

dependencyManagement {
	imports {		
		mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
	}
}

wrapper {
    gradleVersion = '6.3'
    distributionType = Wrapper.DistributionType.ALL
}
